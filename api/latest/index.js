Index.PACKAGES = {"robots" : [{"name" : "robots.Validator", "shortDescription" : "", "object" : "robots\/Validator$.html", "members_object" : [{"label" : "lteq", "tail" : "(a: A, e: F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Order[A]): Validator[F, E, A]", "member" : "robots.ValidatorFunctions.lteq", "link" : "robots\/Validator$.html#lteq[F[_],E,A](a:A,e:F[E])(implicitevidence$42:cats.Traverse[F],implicitevidence$43:cats.MonoidK[F],implicitevidence$44:cats.Order[A]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "lteq", "tail" : "(a: A, f: (A) ⇒ F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Order[A]): Validator[F, E, A]", "member" : "robots.ValidatorFunctions.lteq", "link" : "robots\/Validator$.html#lteq[F[_],E,A](a:A,f:A=>F[E])(implicitevidence$39:cats.Traverse[F],implicitevidence$40:cats.MonoidK[F],implicitevidence$41:cats.Order[A]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "lt", "tail" : "(a: A, e: F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Order[A]): Validator[F, E, A]", "member" : "robots.ValidatorFunctions.lt", "link" : "robots\/Validator$.html#lt[F[_],E,A](a:A,e:F[E])(implicitevidence$36:cats.Traverse[F],implicitevidence$37:cats.MonoidK[F],implicitevidence$38:cats.Order[A]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "lt", "tail" : "(a: A, f: (A) ⇒ F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Order[A]): Validator[F, E, A]", "member" : "robots.ValidatorFunctions.lt", "link" : "robots\/Validator$.html#lt[F[_],E,A](a:A,f:A=>F[E])(implicitevidence$33:cats.Traverse[F],implicitevidence$34:cats.MonoidK[F],implicitevidence$35:cats.Order[A]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "gteq", "tail" : "(a: A, e: F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Order[A]): Validator[F, E, A]", "member" : "robots.ValidatorFunctions.gteq", "link" : "robots\/Validator$.html#gteq[F[_],E,A](a:A,e:F[E])(implicitevidence$30:cats.Traverse[F],implicitevidence$31:cats.MonoidK[F],implicitevidence$32:cats.Order[A]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "gteq", "tail" : "(a: A, f: (A) ⇒ F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Order[A]): Validator[F, E, A]", "member" : "robots.ValidatorFunctions.gteq", "link" : "robots\/Validator$.html#gteq[F[_],E,A](a:A,f:A=>F[E])(implicitevidence$27:cats.Traverse[F],implicitevidence$28:cats.MonoidK[F],implicitevidence$29:cats.Order[A]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "gt", "tail" : "(a: A, e: F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Order[A]): Validator[F, E, A]", "member" : "robots.ValidatorFunctions.gt", "link" : "robots\/Validator$.html#gt[F[_],E,A](a:A,e:F[E])(implicitevidence$24:cats.Traverse[F],implicitevidence$25:cats.MonoidK[F],implicitevidence$26:cats.Order[A]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "gt", "tail" : "(a: A, f: (A) ⇒ F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Order[A]): Validator[F, E, A]", "member" : "robots.ValidatorFunctions.gt", "link" : "robots\/Validator$.html#gt[F[_],E,A](a:A,f:A=>F[E])(implicitevidence$21:cats.Traverse[F],implicitevidence$22:cats.MonoidK[F],implicitevidence$23:cats.Order[A]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "neq", "tail" : "(a: A, e: F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Eq[A]): Validator[F, E, A]", "member" : "robots.ValidatorFunctions.neq", "link" : "robots\/Validator$.html#neq[F[_],E,A](a:A,e:F[E])(implicitevidence$18:cats.Traverse[F],implicitevidence$19:cats.MonoidK[F],implicitevidence$20:cats.Eq[A]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "neq", "tail" : "(a: A, f: (A) ⇒ F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Eq[A]): Validator[F, E, A]", "member" : "robots.ValidatorFunctions.neq", "link" : "robots\/Validator$.html#neq[F[_],E,A](a:A,f:A=>F[E])(implicitevidence$15:cats.Traverse[F],implicitevidence$16:cats.MonoidK[F],implicitevidence$17:cats.Eq[A]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "eql", "tail" : "(a: A, e: F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Eq[A]): Validator[F, E, A]", "member" : "robots.ValidatorFunctions.eql", "link" : "robots\/Validator$.html#eql[F[_],E,A](a:A,e:F[E])(implicitevidence$12:cats.Traverse[F],implicitevidence$13:cats.MonoidK[F],implicitevidence$14:cats.Eq[A]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "eql", "tail" : "(a: A, f: (A) ⇒ F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Eq[A]): Validator[F, E, A]", "member" : "robots.ValidatorFunctions.eql", "link" : "robots\/Validator$.html#eql[F[_],E,A](a:A,f:A=>F[E])(implicitevidence$9:cats.Traverse[F],implicitevidence$10:cats.MonoidK[F],implicitevidence$11:cats.Eq[A]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "validate", "tail" : "(arg0: Traverse[F], M: MonoidK[F]): Validator[F, E, A]", "member" : "robots.ValidatorFunctions.validate", "link" : "robots\/Validator$.html#validate[F[_],E,A](implicitevidence$7:cats.Traverse[F],implicitM:cats.MonoidK[F]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "robotsProfunctorForValidator", "tail" : "(F0: Traverse[F], M0: MonoidK[F]): Profunctor[[A, E]Validator[F, E, A]]", "member" : "robots.ValidatorInstances.robotsProfunctorForValidator", "link" : "robots\/Validator$.html#robotsProfunctorForValidator[F[_]](implicitF0:cats.Traverse[F],implicitM0:cats.MonoidK[F]):cats.functor.Profunctor[[A,E]robots.Validator[F,E,A]]", "kind" : "implicit def"}, {"label" : "robotsChoiceForValidator", "tail" : "(A0: Applicative[F], F0: Traverse[F], M0: MonoidK[F]): Choice[[A, E]Validator[F, E, A]]", "member" : "robots.ValidatorInstances.robotsChoiceForValidator", "link" : "robots\/Validator$.html#robotsChoiceForValidator[F[_]](implicitA0:cats.Applicative[F],implicitF0:cats.Traverse[F],implicitM0:cats.MonoidK[F]):cats.arrow.Choice[[A,E]robots.Validator[F,E,A]]", "kind" : "implicit def"}, {"label" : "robotsContravariantCartesianForValidator", "tail" : "(F0: Traverse[F], M0: MonoidK[F]): ContravariantCartesian[[γ$0$]Validator[F, E, γ$0$]]", "member" : "robots.ValidatorInstances.robotsContravariantCartesianForValidator", "link" : "robots\/Validator$.html#robotsContravariantCartesianForValidator[F[_],E](implicitF0:cats.Traverse[F],implicitM0:cats.MonoidK[F]):cats.ContravariantCartesian[[γ$0$]robots.Validator[F,E,γ$0$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "robots\/Validator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "robots\/Validator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "robots\/Validator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "robots\/Validator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "robots\/Validator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "robots\/Validator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "robots\/Validator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/Validator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/Validator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/Validator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "robots\/Validator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "robots\/Validator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "robots\/Validator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "robots\/Validator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "robots\/Validator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "robots\/Validator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "robots\/Validator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "robots\/Validator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "robots\/Validator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "first", "tail" : "(f: (A) ⇒ M[B])(that: Validator[F, E, Option[B]])(arg0: Foldable[M]): Validator[F, E, A]", "member" : "robots.Validator.first", "link" : "robots\/Validator.html#first[M[_],B](f:A=>M[B])(that:robots.Validator[F,E,Option[B]])(implicitevidence$6:cats.Foldable[M]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "at", "tail" : "(f: (A) ⇒ M[B], i: Int)(that: Validator[F, E, Option[B]])(arg0: Foldable[M]): Validator[F, E, A]", "member" : "robots.Validator.at", "link" : "robots\/Validator.html#at[M[_],B](f:A=>M[B],i:Int)(that:robots.Validator[F,E,Option[B]])(implicitevidence$5:cats.Foldable[M]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "all2", "tail" : "(f: (A) ⇒ B, g: (A) ⇒ M[C])(that: Validator[F, E, (B, C)])(arg0: Traverse[M]): Validator[F, E, A]", "member" : "robots.Validator.all2", "link" : "robots\/Validator.html#all2[M[_],B,C](f:A=>B,g:A=>M[C])(that:robots.Validator[F,E,(B,C)])(implicitevidence$4:cats.Traverse[M]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "all", "tail" : "(f: (A) ⇒ M[B])(that: Validator[F, E, B])(arg0: Foldable[M]): Validator[F, E, A]", "member" : "robots.Validator.all", "link" : "robots\/Validator.html#all[M[_],B](f:A=>M[B])(that:robots.Validator[F,E,B])(implicitevidence$3:cats.Foldable[M]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "has2", "tail" : "(f: (A) ⇒ B, g: (A) ⇒ C)(that: Validator[F, E, (B, C)]): Validator[F, E, A]", "member" : "robots.Validator.has2", "link" : "robots\/Validator.html#has2[B,C](f:A=>B,g:A=>C)(that:robots.Validator[F,E,(B,C)]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "has", "tail" : "(f: (A) ⇒ B)(that: Validator[F, E, B]): Validator[F, E, A]", "member" : "robots.Validator.has", "link" : "robots\/Validator.html#has[B](f:A=>B)(that:robots.Validator[F,E,B]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "or", "tail" : "(that: Validator[F, E, B]): Validator[F, E, Either[A, B]]", "member" : "robots.Validator.or", "link" : "robots\/Validator.html#or[B](that:robots.Validator[F,E,B]):robots.Validator[F,E,Either[A,B]]", "kind" : "def"}, {"label" : "and", "tail" : "(that: Validator[F, E, A]): Validator[F, E, A]", "member" : "robots.Validator.and", "link" : "robots\/Validator.html#and(that:robots.Validator[F,E,A]):robots.Validator[F,E,A]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (B) ⇒ A): Validator[F, E, B]", "member" : "robots.Validator.contramap", "link" : "robots\/Validator.html#contramap[B](f:B=>A):robots.Validator[F,E,B]", "kind" : "def"}, {"label" : "dimap", "tail" : "(f: (B) ⇒ A)(g: (E) ⇒ EE): Validator[F, EE, B]", "member" : "robots.Validator.dimap", "link" : "robots\/Validator.html#dimap[EE,B](f:B=>A)(g:E=>EE):robots.Validator[F,EE,B]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (E) ⇒ EE): Validator[F, EE, A]", "member" : "robots.Validator.leftMap", "link" : "robots\/Validator.html#leftMap[EE](f:E=>EE):robots.Validator[F,EE,A]", "kind" : "def"}, {"label" : "required", "tail" : "(e: F[E]): Validator[F, E, Option[A]]", "member" : "robots.Validator.required", "link" : "robots\/Validator.html#required(e:F[E]):robots.Validator[F,E,Option[A]]", "kind" : "def"}, {"label" : "optional", "tail" : "(): Validator[F, E, Option[A]]", "member" : "robots.Validator.optional", "link" : "robots\/Validator.html#optional:robots.Validator[F,E,Option[A]]", "kind" : "def"}, {"label" : "over", "tail" : "(arg0: Foldable[M]): Validator[F, E, M[A]]", "member" : "robots.Validator.over", "link" : "robots\/Validator.html#over[M[_]](implicitevidence$2:cats.Foldable[M]):robots.Validator[F,E,M[A]]", "kind" : "def"}, {"label" : "run", "tail" : "(a: A): ValidatedNel[E, A]", "member" : "robots.Validator.run", "link" : "robots\/Validator.html#run(a:A):cats.data.ValidatedNel[E,A]", "kind" : "def"}, {"member" : "robots.Validator#<init>", "error" : "unsupported entity"}, {"label" : "validate", "tail" : ": (A) ⇒ F[E]", "member" : "robots.Validator.validate", "link" : "robots\/Validator.html#validate:A=>F[E]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "robots\/Validator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "robots\/Validator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "robots\/Validator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "robots\/Validator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "robots\/Validator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "robots\/Validator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "robots\/Validator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/Validator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/Validator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/Validator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "robots\/Validator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "robots\/Validator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "robots\/Validator.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "robots\/Validator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "robots\/Validator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "robots\/Validator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "robots\/Validator.html", "kind" : "case class"}]};