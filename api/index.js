Index.PACKAGES = {"robots" : [{"name" : "robots.PValidator", "shortDescription" : "PValidator wraps up a validation function validate: A => F[E] which validates the input A and returns a structureof error messages F[E].", "object" : "robots\/PValidator$.html", "members_object" : [{"label" : "robotsSemigroupKForPValidator", "tail" : "(F0: Traverse[F], M0: MonoidK[F]): SemigroupK[[γ$7$]PValidator[F, E, γ$7$, B]]", "member" : "robots.PValidatorInstances.robotsSemigroupKForPValidator", "link" : "robots\/PValidator$.html#robotsSemigroupKForPValidator[F[_],E,B](implicitF0:cats.Traverse[F],implicitM0:cats.MonoidK[F]):cats.SemigroupK[[γ$7$]robots.PValidator[F,E,γ$7$,B]]", "kind" : "implicit def"}, {"label" : "robotsSemigroupForPValidator", "tail" : "(F0: Traverse[F], M0: MonoidK[F]): Semigroup[PValidator[F, E, A, B]]", "member" : "robots.PValidatorInstances.robotsSemigroupForPValidator", "link" : "robots\/PValidator$.html#robotsSemigroupForPValidator[F[_],E,A,B](implicitF0:cats.Traverse[F],implicitM0:cats.MonoidK[F]):cats.Semigroup[robots.PValidator[F,E,A,B]]", "kind" : "implicit def"}, {"label" : "robotsProfunctorForPValidator", "tail" : "(F0: Traverse[F], M0: MonoidK[F]): Profunctor[[γ$5$, δ$6$]PValidator[F, E, γ$5$, δ$6$]]", "member" : "robots.PValidatorInstances.robotsProfunctorForPValidator", "link" : "robots\/PValidator$.html#robotsProfunctorForPValidator[F[_],E](implicitF0:cats.Traverse[F],implicitM0:cats.MonoidK[F]):cats.arrow.Profunctor[[γ$5$,δ$6$]robots.PValidator[F,E,γ$5$,δ$6$]]", "kind" : "implicit def"}, {"label" : "robotsContravariantForPValidator", "tail" : "(F0: Traverse[F], M0: MonoidK[F]): Contravariant[[γ$4$]PValidator[F, E, γ$4$, B]]", "member" : "robots.PValidatorInstances.robotsContravariantForPValidator", "link" : "robots\/PValidator$.html#robotsContravariantForPValidator[F[_],E,B](implicitF0:cats.Traverse[F],implicitM0:cats.MonoidK[F]):cats.Contravariant[[γ$4$]robots.PValidator[F,E,γ$4$,B]]", "kind" : "implicit def"}, {"label" : "robotsChoiceForPValidator", "tail" : "(F0: Traverse[F], M0: MonoidK[F]): Choice[[γ$2$, δ$3$]PValidator[F, E, γ$2$, δ$3$]]", "member" : "robots.PValidatorInstances.robotsChoiceForPValidator", "link" : "robots\/PValidator$.html#robotsChoiceForPValidator[F[_],E](implicitF0:cats.Traverse[F],implicitM0:cats.MonoidK[F]):cats.arrow.Choice[[γ$2$,δ$3$]robots.PValidator[F,E,γ$2$,δ$3$]]", "kind" : "implicit def"}, {"label" : "robotsApplicativeForPValidator", "tail" : "(F0: Traverse[F], M0: MonoidK[F]): Applicative[[δ$1$]PValidator[F, E, A, δ$1$]]", "member" : "robots.PValidatorInstances.robotsApplicativeForPValidator", "link" : "robots\/PValidator$.html#robotsApplicativeForPValidator[F[_],E,A](implicitF0:cats.Traverse[F],implicitM0:cats.MonoidK[F]):cats.Applicative[[δ$1$]robots.PValidator[F,E,A,δ$1$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "robots\/PValidator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "robots\/PValidator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "robots\/PValidator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "robots\/PValidator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "robots\/PValidator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "robots\/PValidator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "robots\/PValidator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/PValidator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/PValidator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/PValidator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "robots\/PValidator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "robots\/PValidator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "robots\/PValidator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "robots\/PValidator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "robots\/PValidator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "robots\/PValidator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "robots\/PValidator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "robots\/PValidator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "robots\/PValidator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "robots\/PValidator.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "robots\/PValidator.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PValidator[F, E, A, B]) ⇒ Boolean, msg: ⇒ Any): PValidator[F, E, A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "robots\/PValidator.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PValidator[F, E, A, B]) ⇒ Boolean): PValidator[F, E, A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "robots\/PValidator.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): PValidator[F, E, A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "robots\/PValidator.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PValidator[F, E, A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "robots\/PValidator.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PValidator[F, E, A, B], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "robots\/PValidator.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PValidator[F, E, A, B], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "robots\/PValidator.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "first", "tail" : "(f: (A) ⇒ M[C])(that: PValidator[F, E, Option[C], _])(FM: Foldable[M]): PValidator[F, E, A, B]", "member" : "robots.PValidator.first", "link" : "robots\/PValidator.html#first[M[_],C](f:A=>M[C])(that:robots.PValidator[F,E,Option[C],_])(implicitFM:cats.Foldable[M]):robots.PValidator[F,E,A,B]", "kind" : "def"}, {"label" : "at", "tail" : "(f: (A) ⇒ M[C], i: Long)(that: PValidator[F, E, Option[C], _])(TM: Traverse[M]): PValidator[F, E, A, B]", "member" : "robots.PValidator.at", "link" : "robots\/PValidator.html#at[M[_],C](f:A=>M[C],i:Long)(that:robots.PValidator[F,E,Option[C],_])(implicitTM:cats.Traverse[M]):robots.PValidator[F,E,A,B]", "kind" : "def"}, {"label" : "allIndexed", "tail" : "(g: (A) ⇒ M[C])(that: PValidator[F, E, (C, Int), _])(TM: Traverse[M]): PValidator[F, E, A, B]", "member" : "robots.PValidator.allIndexed", "link" : "robots\/PValidator.html#allIndexed[M[_],C](g:A=>M[C])(that:robots.PValidator[F,E,(C,Int),_])(implicitTM:cats.Traverse[M]):robots.PValidator[F,E,A,B]", "kind" : "def"}, {"label" : "all2", "tail" : "(f: (A) ⇒ C, g: (A) ⇒ M[D])(that: PValidator[F, E, (C, D), _])(TM: Traverse[M]): PValidator[F, E, A, B]", "member" : "robots.PValidator.all2", "link" : "robots\/PValidator.html#all2[M[_],C,D](f:A=>C,g:A=>M[D])(that:robots.PValidator[F,E,(C,D),_])(implicitTM:cats.Traverse[M]):robots.PValidator[F,E,A,B]", "kind" : "def"}, {"label" : "all", "tail" : "(f: (A) ⇒ M[C])(that: PValidator[F, E, C, _])(arg0: Traverse[M]): PValidator[F, E, A, B]", "member" : "robots.PValidator.all", "link" : "robots\/PValidator.html#all[M[_],C](f:A=>M[C])(that:robots.PValidator[F,E,C,_])(implicitevidence$1:cats.Traverse[M]):robots.PValidator[F,E,A,B]", "kind" : "def"}, {"label" : "has2", "tail" : "(f: (A) ⇒ C, g: (A) ⇒ D)(that: PValidator[F, E, (C, D), _]): PValidator[F, E, A, B]", "member" : "robots.PValidator.has2", "link" : "robots\/PValidator.html#has2[C,D](f:A=>C,g:A=>D)(that:robots.PValidator[F,E,(C,D),_]):robots.PValidator[F,E,A,B]", "kind" : "def"}, {"label" : "has", "tail" : "(f: (A) ⇒ C)(that: PValidator[F, E, C, _]): PValidator[F, E, A, B]", "member" : "robots.PValidator.has", "link" : "robots\/PValidator.html#has[C](f:A=>C)(that:robots.PValidator[F,E,C,_]):robots.PValidator[F,E,A,B]", "kind" : "def"}, {"label" : "or", "tail" : "(that: PValidator[F, E, C, B]): PValidator[F, E, Either[A, C], B]", "member" : "robots.PValidator.or", "link" : "robots\/PValidator.html#or[C](that:robots.PValidator[F,E,C,B]):robots.PValidator[F,E,Either[A,C],B]", "kind" : "def"}, {"label" : "product", "tail" : "(that: PValidator[F, E, A, C]): PValidator[F, E, A, (B, C)]", "member" : "robots.PValidator.product", "link" : "robots\/PValidator.html#product[C](that:robots.PValidator[F,E,A,C]):robots.PValidator[F,E,A,(B,C)]", "kind" : "def"}, {"label" : "and", "tail" : "(that: PValidator[F, E, A, _]): PValidator[F, E, A, B]", "member" : "robots.PValidator.and", "link" : "robots\/PValidator.html#and(that:robots.PValidator[F,E,A,_]):robots.PValidator[F,E,A,B]", "kind" : "def"}, {"label" : "contramap", "tail" : "(g: (Z) ⇒ A): PValidator[F, E, Z, B]", "member" : "robots.PValidator.contramap", "link" : "robots\/PValidator.html#contramap[Z](g:Z=>A):robots.PValidator[F,E,Z,B]", "kind" : "def"}, {"label" : "dimap", "tail" : "(g: (Z) ⇒ A)(h: (B) ⇒ C): PValidator[F, E, Z, C]", "member" : "robots.PValidator.dimap", "link" : "robots\/PValidator.html#dimap[Z,C](g:Z=>A)(h:B=>C):robots.PValidator[F,E,Z,C]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(g: (E) ⇒ EE): PValidator[F, EE, A, B]", "member" : "robots.PValidator.leftMap", "link" : "robots\/PValidator.html#leftMap[EE](g:E=>EE):robots.PValidator[F,EE,A,B]", "kind" : "def"}, {"label" : "required", "tail" : "(e: F[E]): PValidator[F, E, Option[A], B]", "member" : "robots.PValidator.required", "link" : "robots\/PValidator.html#required(e:F[E]):robots.PValidator[F,E,Option[A],B]", "kind" : "def"}, {"label" : "optional", "tail" : "(): PValidator[F, E, Option[A], Option[B]]", "member" : "robots.PValidator.optional", "link" : "robots\/PValidator.html#optional:robots.PValidator[F,E,Option[A],Option[B]]", "kind" : "def"}, {"label" : "over", "tail" : "(TM: Traverse[M]): PValidator[F, E, M[A], M[B]]", "member" : "robots.PValidator.over", "link" : "robots\/PValidator.html#over[M[_]](implicitTM:cats.Traverse[M]):robots.PValidator[F,E,M[A],M[B]]", "kind" : "def"}, {"label" : "map2", "tail" : "(that: PValidator[F, E, A, C])(g: (B, C) ⇒ D): PValidator[F, E, A, D]", "member" : "robots.PValidator.map2", "link" : "robots\/PValidator.html#map2[C,D](that:robots.PValidator[F,E,A,C])(g:(B,C)=>D):robots.PValidator[F,E,A,D]", "kind" : "def"}, {"label" : "map", "tail" : "(g: (B) ⇒ C): PValidator[F, E, A, C]", "member" : "robots.PValidator.map", "link" : "robots\/PValidator.html#map[C](g:B=>C):robots.PValidator[F,E,A,C]", "kind" : "def"}, {"label" : "andThen", "tail" : "(that: PValidator[F, E, B, C]): PValidator[F, E, A, C]", "member" : "robots.PValidator.andThen", "link" : "robots\/PValidator.html#andThen[C](that:robots.PValidator[F,E,B,C]):robots.PValidator[F,E,A,C]", "kind" : "def"}, {"label" : "runNel", "tail" : "(a: A)(A: ApplicativeError[[β$0$]G[NonEmptyList[E], β$0$], NonEmptyList[E]]): G[NonEmptyList[E], B]", "member" : "robots.PValidator.runNel", "link" : "robots\/PValidator.html#runNel[G[_,_]](a:A)(implicitA:cats.ApplicativeError[[β$0$]G[cats.data.NonEmptyList[E],β$0$],cats.data.NonEmptyList[E]]):G[cats.data.NonEmptyList[E],B]", "kind" : "def"}, {"label" : "runK", "tail" : "(a: A)(g: ~>[F, H])(A: ApplicativeError[G, H[E]]): G[B]", "member" : "robots.PValidator.runK", "link" : "robots\/PValidator.html#runK[G[_],H[_]](a:A)(g:F~>H)(implicitA:cats.ApplicativeError[G,H[E]]):G[B]", "kind" : "def"}, {"label" : "run_", "tail" : "(a: A)(A: ApplicativeError[G, Unit]): G[B]", "member" : "robots.PValidator.run_", "link" : "robots\/PValidator.html#run_[G[_]](a:A)(implicitA:cats.ApplicativeError[G,Unit]):G[B]", "kind" : "def"}, {"label" : "run", "tail" : "(a: A)(A: ApplicativeError[G, F[E]]): G[B]", "member" : "robots.PValidator.run", "link" : "robots\/PValidator.html#run[G[_]](a:A)(implicitA:cats.ApplicativeError[G,F[E]]):G[B]", "kind" : "def"}, {"label" : "runWith", "tail" : "(a: A)(g: (F[E]) ⇒ EE)(A: ApplicativeError[G, EE]): G[B]", "member" : "robots.PValidator.runWith", "link" : "robots\/PValidator.html#runWith[G[_],EE](a:A)(g:F[E]=>EE)(implicitA:cats.ApplicativeError[G,EE]):G[B]", "kind" : "def"}, {"member" : "robots.PValidator#<init>", "error" : "unsupported entity"}, {"label" : "f", "tail" : ": (A) ⇒ B", "member" : "robots.PValidator.f", "link" : "robots\/PValidator.html#f:A=>B", "kind" : "val"}, {"label" : "validate", "tail" : ": (A) ⇒ F[E]", "member" : "robots.PValidator.validate", "link" : "robots\/PValidator.html#validate:A=>F[E]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "robots\/PValidator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "robots\/PValidator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "robots\/PValidator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "robots\/PValidator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "robots\/PValidator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "robots\/PValidator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "robots\/PValidator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/PValidator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/PValidator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/PValidator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "robots\/PValidator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "robots\/PValidator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "robots\/PValidator.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "robots\/PValidator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "robots\/PValidator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "robots\/PValidator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "robots\/PValidator.html", "kind" : "case class"}, {"name" : "robots.Validator", "shortDescription" : "The companion object for Validator provides a number of functions for constructing simple validators.", "object" : "robots\/package$$Validator$.html", "members_object" : [{"label" : "lteq", "tail" : "(a: A, e: F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Order[A]): Validator[F, E, A]", "member" : "robots.Validator.lteq", "link" : "robots\/package$$Validator$.html#lteq[F[_],E,A](a:A,e:F[E])(implicitevidence$32:cats.Traverse[F],implicitevidence$33:cats.MonoidK[F],implicitevidence$34:cats.Order[A]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "lteq", "tail" : "(a: A, f: (A) ⇒ F[E])(arg0: Traverse[F], arg1: MonoidK[F], O: Order[A]): Validator[F, E, A]", "member" : "robots.Validator.lteq", "link" : "robots\/package$$Validator$.html#lteq[F[_],E,A](a:A,f:A=>F[E])(implicitevidence$30:cats.Traverse[F],implicitevidence$31:cats.MonoidK[F],implicitO:cats.Order[A]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "lt", "tail" : "(a: A, e: F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Order[A]): Validator[F, E, A]", "member" : "robots.Validator.lt", "link" : "robots\/package$$Validator$.html#lt[F[_],E,A](a:A,e:F[E])(implicitevidence$27:cats.Traverse[F],implicitevidence$28:cats.MonoidK[F],implicitevidence$29:cats.Order[A]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "lt", "tail" : "(a: A, f: (A) ⇒ F[E])(arg0: Traverse[F], arg1: MonoidK[F], O: Order[A]): Validator[F, E, A]", "member" : "robots.Validator.lt", "link" : "robots\/package$$Validator$.html#lt[F[_],E,A](a:A,f:A=>F[E])(implicitevidence$25:cats.Traverse[F],implicitevidence$26:cats.MonoidK[F],implicitO:cats.Order[A]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "gteq", "tail" : "(a: A, e: F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Order[A]): Validator[F, E, A]", "member" : "robots.Validator.gteq", "link" : "robots\/package$$Validator$.html#gteq[F[_],E,A](a:A,e:F[E])(implicitevidence$22:cats.Traverse[F],implicitevidence$23:cats.MonoidK[F],implicitevidence$24:cats.Order[A]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "gteq", "tail" : "(a: A, f: (A) ⇒ F[E])(arg0: Traverse[F], arg1: MonoidK[F], O: Order[A]): Validator[F, E, A]", "member" : "robots.Validator.gteq", "link" : "robots\/package$$Validator$.html#gteq[F[_],E,A](a:A,f:A=>F[E])(implicitevidence$20:cats.Traverse[F],implicitevidence$21:cats.MonoidK[F],implicitO:cats.Order[A]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "gt", "tail" : "(a: A, e: F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Order[A]): Validator[F, E, A]", "member" : "robots.Validator.gt", "link" : "robots\/package$$Validator$.html#gt[F[_],E,A](a:A,e:F[E])(implicitevidence$17:cats.Traverse[F],implicitevidence$18:cats.MonoidK[F],implicitevidence$19:cats.Order[A]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "gt", "tail" : "(a: A, f: (A) ⇒ F[E])(arg0: Traverse[F], arg1: MonoidK[F], O: Order[A]): Validator[F, E, A]", "member" : "robots.Validator.gt", "link" : "robots\/package$$Validator$.html#gt[F[_],E,A](a:A,f:A=>F[E])(implicitevidence$15:cats.Traverse[F],implicitevidence$16:cats.MonoidK[F],implicitO:cats.Order[A]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "neq", "tail" : "(a: A, e: F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Eq[A]): Validator[F, E, A]", "member" : "robots.Validator.neq", "link" : "robots\/package$$Validator$.html#neq[F[_],E,A](a:A,e:F[E])(implicitevidence$12:cats.Traverse[F],implicitevidence$13:cats.MonoidK[F],implicitevidence$14:cats.Eq[A]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "neq", "tail" : "(a: A, f: (A) ⇒ F[E])(arg0: Traverse[F], arg1: MonoidK[F], E: Eq[A]): Validator[F, E, A]", "member" : "robots.Validator.neq", "link" : "robots\/package$$Validator$.html#neq[F[_],E,A](a:A,f:A=>F[E])(implicitevidence$10:cats.Traverse[F],implicitevidence$11:cats.MonoidK[F],implicitE:cats.Eq[A]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "eql", "tail" : "(a: A, e: F[E])(arg0: Traverse[F], arg1: MonoidK[F], arg2: Eq[A]): Validator[F, E, A]", "member" : "robots.Validator.eql", "link" : "robots\/package$$Validator$.html#eql[F[_],E,A](a:A,e:F[E])(implicitevidence$7:cats.Traverse[F],implicitevidence$8:cats.MonoidK[F],implicitevidence$9:cats.Eq[A]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "eql", "tail" : "(a: A, f: (A) ⇒ F[E])(arg0: Traverse[F], arg1: MonoidK[F], E: Eq[A]): Validator[F, E, A]", "member" : "robots.Validator.eql", "link" : "robots\/package$$Validator$.html#eql[F[_],E,A](a:A,f:A=>F[E])(implicitevidence$5:cats.Traverse[F],implicitevidence$6:cats.MonoidK[F],implicitE:cats.Eq[A]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: F[E])(arg0: Traverse[F], M: MonoidK[F]): Validator[F, E, A]", "member" : "robots.Validator.fail", "link" : "robots\/package$$Validator$.html#fail[F[_],E,A](e:F[E])(implicitevidence$3:cats.Traverse[F],implicitM:cats.MonoidK[F]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "validate", "tail" : "(arg0: Traverse[F], M: MonoidK[F]): Validator[F, E, A]", "member" : "robots.Validator.validate", "link" : "robots\/package$$Validator$.html#validate[F[_],E,A](implicitevidence$2:cats.Traverse[F],implicitM:cats.MonoidK[F]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(validate: (A) ⇒ F[E])(arg0: Traverse[F], M: MonoidK[F]): Validator[F, E, A]", "member" : "robots.Validator.apply", "link" : "robots\/package$$Validator$.html#apply[F[_],E,A](validate:A=>F[E])(implicitevidence$1:cats.Traverse[F],implicitM:cats.MonoidK[F]):robots.package.Validator[F,E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "robots\/package$$Validator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "robots\/package$$Validator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "robots\/package$$Validator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "robots\/package$$Validator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "robots\/package$$Validator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "robots\/package$$Validator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "robots\/package$$Validator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/package$$Validator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/package$$Validator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "robots\/package$$Validator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "robots\/package$$Validator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "robots\/package$$Validator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "robots\/package$$Validator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "robots\/package$$Validator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "robots\/package$$Validator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "robots\/package$$Validator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "robots\/package$$Validator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "robots\/package$$Validator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "robots\/package$$Validator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};